version: '3.4'

services:

#  backend:
#    container_name: mymeetings_backend
#    build:
#      context: ./src/
#    ports:
#      - "5000:8080"
#    networks:
#      - starfish-crm-network
#  develop:
#    watch:
#      - action: rebuild
#        path: .
#    environment:
#      - Meetings_MeetingsConnectionString=Server=mymeetingsdb,1433;Database=MyMeetings;User=sa;Password=Test@12345;Encrypt=False;
#    depends_on:
#      - migrator
#    restart: on-failure
#
  modular-db:
    build: ./src/Database/
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "8083:5432"
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1h
      timeout: 5s
      retries: 5

  migrator:
    container_name: db_migrator
    build:
      context: ./src/
      dockerfile: ./Database/Dockerfile_DatabaseMigrator
    networks:
      - my-network
    environment:
      - ASPNETCORE_App_IntegrationTests_ConnectionString=Server=modular-db;Port=5432;Database=app;Userid=paul;Password=Hash1234/;
      - App_ConnectionString=Server=modular-db;Port=5432;Database=app;Userid=paul;Password=Hash1234/;
    command:
      [
        "./wait-for-it.sh",
        "modular-db:5432",
        "--timeout=60",
        "--",
        "/bin/bash",
        "/entrypoint_DatabaseMigrator.sh"
      ]
    restart: on-failure

networks:
  my-network:
    
volumes:
  db-data:
  
